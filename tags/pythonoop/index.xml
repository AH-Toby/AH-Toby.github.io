<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PythonOOP on Toby Blog</title>
    <link>http://localhost:1313/tags/pythonoop/</link>
    <description>Recent content in PythonOOP on Toby Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en_us</language>
    <lastBuildDate>Sun, 14 Jun 2020 22:57:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/pythonoop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python面向对象编程基础(八)</title>
      <link>http://localhost:1313/PythonBase/47/</link>
      <pubDate>Sun, 14 Jun 2020 22:57:00 +0000</pubDate>
      <guid>http://localhost:1313/PythonBase/47/</guid>
      <description>一.__new__方法</description>
    </item>
    <item>
      <title>Python面向对象编程基础(七)</title>
      <link>http://localhost:1313/PythonBase/46/</link>
      <pubDate>Sun, 14 Jun 2020 21:23:00 +0000</pubDate>
      <guid>http://localhost:1313/PythonBase/46/</guid>
      <description>一.实例对象和类对象 1.实例对象(Instance Object) 概念: 通过类创建的对象 特点: 实例对象是通过类对象实例化得到的对象，也称为类的实例。 每个实</description>
    </item>
    <item>
      <title>Python面向对象编程基础(六)</title>
      <link>http://localhost:1313/PythonBase/45/</link>
      <pubDate>Fri, 12 Jun 2020 21:50:00 +0000</pubDate>
      <guid>http://localhost:1313/PythonBase/45/</guid>
      <description>一.什么是多态 多态是指相同的方法可以在不同的对象上表现出不同的行为，具体的行为取决于对象的类型。简而言之是不同的子类对象调用相同的父类方法，</description>
    </item>
    <item>
      <title>Python面向对象编程基础(五)</title>
      <link>http://localhost:1313/PythonBase/44/</link>
      <pubDate>Fri, 12 Jun 2020 14:55:00 +0000</pubDate>
      <guid>http://localhost:1313/PythonBase/44/</guid>
      <description>一.什么是继承 生活中: 继承的含义一般是子女继承父辈的财产。 程序中: 继承(Inheritance)是指,允许一个类(子类或派生类)继承另一个类</description>
    </item>
    <item>
      <title>Python面向对象编程基础(四)</title>
      <link>http://localhost:1313/PythonBase/43/</link>
      <pubDate>Fri, 12 Jun 2020 13:31:00 +0000</pubDate>
      <guid>http://localhost:1313/PythonBase/43/</guid>
      <description>一.面向对象的三大特性 封装(Encapsulation): 将数据和代码捆绑在一个对象中,对外部隐藏对象的内部细节,仅暴露必要的接口供外部访问</description>
    </item>
    <item>
      <title>Python面向对象编程基础(三)</title>
      <link>http://localhost:1313/PythonBase/42/</link>
      <pubDate>Thu, 11 Jun 2020 15:32:00 +0000</pubDate>
      <guid>http://localhost:1313/PythonBase/42/</guid>
      <description>一.魔法方法 魔法方法(Magic methods)也被称为特殊方法(Special methods)或双下划线方法(Dunder methods)</description>
    </item>
    <item>
      <title>Python面向对象编程基础(二)</title>
      <link>http://localhost:1313/PythonBase/41/</link>
      <pubDate>Thu, 11 Jun 2020 14:53:00 +0000</pubDate>
      <guid>http://localhost:1313/PythonBase/41/</guid>
      <description>一.类的定义 1.定义类的结构 结构: class 类名(object): # 属性定义 属性1 = value1 # 方法定义 def 方法(self, parameters): # 方法实现 pass demo: class Person(object): def __init__(self, name, age): self.name = name</description>
    </item>
    <item>
      <title>Python面向对象编程基础(一)</title>
      <link>http://localhost:1313/PythonBase/40/</link>
      <pubDate>Thu, 11 Jun 2020 14:36:00 +0000</pubDate>
      <guid>http://localhost:1313/PythonBase/40/</guid>
      <description>一.什么是面向对象？ 生活中我们用洗衣机洗衣服不需要考虑洗衣机的构造和制造我们只需要直接把衣服丢进去即可，这种 让其他专业的事物去做的思想 就是面</description>
    </item>
  </channel>
</rss>
